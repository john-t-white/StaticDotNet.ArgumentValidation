<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SEE_INNER_EXCEPTION_FOR_DETAILS" xml:space="preserve">
    <value>See inner excepetion for details.</value>
  </data>
  <data name="STRING_LENGTH_BELOW_MIN_LENGTH" xml:space="preserve">
    <value>Value "{0}" with a length of {1} is below the minimum length of {2}.</value>
    <comment>{0} - Value
{1} - Array Value Length
{2} - Minimum Length</comment>
  </data>
  <data name="STRING_LENGTH_EXCEEDS_MAX_LENGTH" xml:space="preserve">
    <value>Value "{0}" with a length of {1} exceeds the maximum length of {2}.</value>
    <comment>{0} - Value
{1} - Array Value Length
{2} - Maximum Length</comment>
  </data>
  <data name="STRING_LENGTH_MUST_BE_BETWEEN" xml:space="preserve">
    <value>Value "{0}" with a length of {1} must have a length between {2} and {3}.</value>
    <comment>{0} - Value
{1} - Value Length
{2} - Mininum Length
{3} - Maximum Length</comment>
  </data>
  <data name="STRING_LENGTH_MUST_BE_EQUAL_TO" xml:space="preserve">
    <value>Value "{0}" with a length of {1} must have a length equal to {2}.</value>
    <comment>{0} - Value
{1} - Value Length
{2} - Expected Length</comment>
  </data>
  <data name="STRING_MUST_BE_ASCII_DIGITS" xml:space="preserve">
    <value>Value "{0}" must be ASCII digits.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="STRING_MUST_BE_ASCII_LETTERS" xml:space="preserve">
    <value>Value "{0}" must be ASCII letters.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="STRING_MUST_BE_ASCII_LETTERS_OR_DIGITS" xml:space="preserve">
    <value>Value "{0}" must be ASCII letters or digits.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="STRING_MUST_BE_LOWER_ASCII_LETTERS" xml:space="preserve">
    <value>Value "{0}" must be lower case ASCII letters.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="STRING_MUST_BE_LOWER_ASCII_LETTERS_OR_DIGITS" xml:space="preserve">
    <value>Value "{0}" must be lower case ASCII letters or digits.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="STRING_MUST_BE_UPPER_ASCII_LETTERS" xml:space="preserve">
    <value>Value "{0}" must be upper case ASCII letters.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="STRING_MUST_BE_UPPER_ASCII_LETTERS_OR_DIGITS" xml:space="preserve">
    <value>Value "{0}" must be upper case ASCII letters or digits.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="STRING_MUST_CONTAIN" xml:space="preserve">
    <value>Value "{0}" must contain {1}.</value>
    <comment>{0} - Value
{1} - Contains</comment>
  </data>
  <data name="STRING_MUST_END_WITH" xml:space="preserve">
    <value>Value "{0}" must end with {1}.</value>
    <comment>{0} - Value
{1} - Ends With</comment>
  </data>
  <data name="STRING_MUST_START_WITH" xml:space="preserve">
    <value>Value "{0}" must start with {1}.</value>
    <comment>{0} - Value
{1} - Starts With</comment>
  </data>
  <data name="TYPE_MUST_BE_ASSIGNABLE_TO" xml:space="preserve">
    <value>Value {0} must be assignable to {1}.</value>
    <comment>{0} - Value
{1} - Expected Type</comment>
  </data>
  <data name="VALUE_CANNOT_BE_EMPTY" xml:space="preserve">
    <value>Value cannot be empty.</value>
  </data>
  <data name="VALUE_CANNOT_BE_WHITE_SPACE" xml:space="preserve">
    <value>Value cannot be white space.</value>
  </data>
  <data name="VALUE_LENGTH_BELOW_MIN_LENGTH" xml:space="preserve">
    <value>Value with a length of {0} is below the minimum length of {1}.</value>
    <comment>{0} - Value Length
{1} - Minimum Length</comment>
  </data>
  <data name="VALUE_LENGTH_EXCEEDS_MAX_LENGTH" xml:space="preserve">
    <value>Value with a length of {0} exceeds the maximum length of {1}.</value>
    <comment>{0} - Value Length
{1} - Maximum Length</comment>
  </data>
  <data name="VALUE_LENGTH_MUST_BE_BETWEEN" xml:space="preserve">
    <value>Value with a length of {0} must have a length between {1} and {2}.</value>
    <comment>{0} - Value Length
{1} - Mininum Length
{2} - Maximum Length</comment>
  </data>
  <data name="VALUE_LENGTH_MUST_BE_EQUAL_TO" xml:space="preserve">
    <value>Value with a length of {0} must have a length equal to {1}.</value>
    <comment>{0} - Value Length
{1} - Expected Length</comment>
  </data>
  <data name="VALUE_MUST_BE_ABSOLUTE_URI" xml:space="preserve">
    <value>"{0}" must be an absolute uri.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_ABSOLUTE_WITH_SCHEME" xml:space="preserve">
    <value>"{0}" must be an absolute uri with scheme {1}.</value>
    <comment>{0} - Value
{1} - Expected Scheme</comment>
  </data>
  <data name="VALUE_MUST_BE_ASCII_DIGIT" xml:space="preserve">
    <value>Value "{0}" must be an ASCII digit.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_ASCII_LETTER" xml:space="preserve">
    <value>Value "{0}" must be an ASCII letter.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_ASCII_LETTER_OR_DIGIT" xml:space="preserve">
    <value>Value "{0}" must be an ASCII letter or digit.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_ASSIGNABLE_TO" xml:space="preserve">
    <value>Value of type {0} must be assignable to {1}.</value>
    <comment>{0} - Value Type
{1} - Expected Type</comment>
  </data>
  <data name="VALUE_MUST_BE_BETWEEN" xml:space="preserve">
    <value>Value {0} must be between {1} and {2}.</value>
    <comment>{0} - Value
{1} - Minimum Value
{2} - Maximum Value</comment>
  </data>
  <data name="VALUE_MUST_BE_DIGIT" xml:space="preserve">
    <value>Value "{0}" must be a digit.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_EQUAL_TO" xml:space="preserve">
    <value>Value {0} must be equal to {1}.</value>
    <comment>{0} - Value
{1} - Expected Value</comment>
  </data>
  <data name="VALUE_MUST_BE_FALSE" xml:space="preserve">
    <value>Value must be false.</value>
  </data>
  <data name="VALUE_MUST_BE_GREATER_THAN" xml:space="preserve">
    <value>Value {0} must be greater than {1}.</value>
    <comment>{0} - Value
{1} - Maximum Value</comment>
  </data>
  <data name="VALUE_MUST_BE_GREATER_THAN_OR_EQUAL_TO" xml:space="preserve">
    <value>Value {0} must be greater than or equal to {1}.</value>
    <comment>{0} - Value
{1} - Maximum Value</comment>
  </data>
  <data name="VALUE_MUST_BE_LESS_THAN" xml:space="preserve">
    <value>Value {0} must be less than {1}.</value>
    <comment>{0} - Value
{1} - Minimum Value</comment>
  </data>
  <data name="VALUE_MUST_BE_LESS_THAN_OR_EQUAL_TO" xml:space="preserve">
    <value>Value {0} must be less than or equal to {1}.</value>
    <comment>{0} - Value
{1} - Minimum Value</comment>
  </data>
  <data name="VALUE_MUST_BE_LETTER" xml:space="preserve">
    <value>Value "{0}" must be a letter.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_LETTER_OR_DIGIT" xml:space="preserve">
    <value>Value "{0}" must be a letter or digit.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_LOWER" xml:space="preserve">
    <value>Value "{0}" must be lower case.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_LOWER_ASCII_LETTER" xml:space="preserve">
    <value>Value "{0}" must be a lower case ASCII letter.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_LOWER_ASCII_LETTER_OR_DIGIT" xml:space="preserve">
    <value>Value "{0}" must be a lower case ASCII letter or digit.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_NULL" xml:space="preserve">
    <value>Value must be null.</value>
  </data>
  <data name="VALUE_MUST_BE_NUMBER" xml:space="preserve">
    <value>Value "{0}" must be a number.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_PARSABLE_TO" xml:space="preserve">
    <value>Value "{0}" must be parsable to {1}.</value>
    <comment>{0} - Value
{1} - Expected Type</comment>
  </data>
  <data name="VALUE_MUST_BE_READABLE" xml:space="preserve">
    <value>Value must be readable.</value>
  </data>
  <data name="VALUE_MUST_BE_RELATIVE" xml:space="preserve">
    <value>"{0}" must be a relative uri.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_SAME" xml:space="preserve">
    <value>Value must be the same.</value>
  </data>
  <data name="VALUE_MUST_BE_SEEKABLE" xml:space="preserve">
    <value>Value must be seekable.</value>
  </data>
  <data name="VALUE_MUST_BE_TRUE" xml:space="preserve">
    <value>Value must be true.</value>
  </data>
  <data name="VALUE_MUST_BE_UPPER" xml:space="preserve">
    <value>Value "{0}" must be upper case.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_UPPER_ASCII_LETTER" xml:space="preserve">
    <value>Value "{0}" must be an upper case ASCII letter.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_UPPER_ASCII_LETTER_OR_DIGIT" xml:space="preserve">
    <value>Value "{0}" must be an upper case ASCII letter or digit.</value>
    <comment>{0} - Value</comment>
  </data>
  <data name="VALUE_MUST_BE_WRITABLE" xml:space="preserve">
    <value>Value must be writable.</value>
  </data>
  <data name="VALUE_MUST_CONTAIN" xml:space="preserve">
    <value>Value must contain {0}.</value>
    <comment>{0} - Contains</comment>
  </data>
  <data name="VALUE_MUST_END_WITH" xml:space="preserve">
    <value>Value must end with {0}.</value>
    <comment>{0} - Ends With</comment>
  </data>
  <data name="VALUE_MUST_HAVE_DATETIMEKIND_LOCAL" xml:space="preserve">
    <value>Value must have DateTimeKind.Local.</value>
  </data>
  <data name="VALUE_MUST_HAVE_DATETIMEKIND_UTC" xml:space="preserve">
    <value>Value must have DateTimeKind.Utc.</value>
  </data>
  <data name="VALUE_MUST_HAVE_SCALE_EQUAL_TO" xml:space="preserve">
    <value>Value {0} must have a scale equal to {1}.</value>
    <comment>{0} - Value
{1} - Scale</comment>
  </data>
  <data name="VALUE_MUST_HAVE_SCALE_LESS_THAN_OR_EQUAL_TO" xml:space="preserve">
    <value>Value {0} must have a scale less than or equal to {1}.</value>
    <comment>{0} - Value
{1} - Scale</comment>
  </data>
  <data name="VALUE_MUST_MATCH_REGEX" xml:space="preserve">
    <value>Value "{0}" must match the regex {1}.</value>
    <comment>{0} - Value
{1} - Regex</comment>
  </data>
  <data name="VALUE_MUST_NOT_BE_SAME" xml:space="preserve">
    <value>Value must not be the same.</value>
  </data>
  <data name="VALUE_MUST_START_WITH" xml:space="preserve">
    <value>Value must start with {0}.</value>
    <comment>{0} - Starts With</comment>
  </data>
  <data name="VALUE_NOT_DEFINED" xml:space="preserve">
    <value>Value is not defined.</value>
  </data>
</root>